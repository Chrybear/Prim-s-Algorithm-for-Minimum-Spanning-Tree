#   Author: Charles Ryan Barrett
#   Purpose: Create a minimum spanning tree
#   Input: A square 2-D array of weights taken from a graph of vertices.
#   Output: Path for a minimum spanning tree based on given weights
#   For: CSC 320 bonus points :D

import math

def prim(w):
    f = []  # list of edges
    distance = []
    nearest = [1]*(len(w) - 1)
    vnear = 0

    # Fill up distance array
    for i in range(1, len(w)):
        distance.append(w[0][i])

    for i in range(1, len(w)):
        miny = math.inf

        for j in range(0, len(distance)):
           # print(j)
            if 0 <= distance[j] < miny:
                miny = distance[j]
                vnear = j
        edge = [vnear + 1, nearest[vnear] + 1]  # Adding 1 because most vertices don't start at 1, makes it easier.
        f.append(edge)
        distance[vnear] = -1

        for j in range(0, len(distance)):
            if w[j][vnear] < distance[j]:
                distance[j] = w[j][vnear]
                nearest[j] = vnear
    return f


def main():
    print('Yer doing good, lad!')
    ifn = math.inf

    w = [[0, 1, 3, ifn, ifn],
         [1, 0, 3, 6, ifn],
         [3, 3, 0, 3, 2],
         [ifn, 6, 4, 0, 5],
         [ifn, ifn, 2, 5, 0]
         ]
    print(prim(w))


if __name__ == '__main__':
    main()
